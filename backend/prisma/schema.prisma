// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id          String        @id @default(uuid())
    email       String        @unique
    password    String?
    name        String
    photo       String?
    provider    AuthProvider
    salt        String?
    createdAt   DateTime       @default(now())
    posts       Post[]
    likes       Like[]
    comments    Comments[]
}

model Post {
    id          String         @id @default(uuid())
    title       String
    excerpt     String?
    content     String?
    category    String
    tag         String[]
    image       String?
    userId      String
    user        User            @relation(fields: [userId], references: [id])
    postedAt    DateTime        @default(now())
    like        Like[]
    comments    Comments[]
}

model Comments {
    id          String          @id @default(uuid())
    body        String
    postId      String
    userId      String
    post        Post            @relation(fields: [postId], references: [id])
    user        User            @relation(fields: [userId], references: [id])
    commentedAt DateTime        @default(now())
}

model Like {
    id          String          @id @default(uuid())
    userId      String
    postId      String
    user        User            @relation(fields: [userId], references: [id])
    post        Post            @relation(fields: [postId], references: [id])
    likedAt     DateTime        @default(now())

    @@unique([userId, postId]) // Composite unique constraint
}

enum AuthProvider {
    EMAIL
    GOOGLE
    GITHUB
  }
